{"version":3,"sources":["components/Layout/DrawerItem.js","components/Layout/Drawer.js","components/Layout/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["DrawerItem","text","url","svg","ListItem","button","key","component","Link","to","ListItemIcon","ListItemText","primary","Drawer","historyIcon","personIcon","Toolbar","Divider","List","useStyles","makeStyles","theme","drawer","breakpoints","up","width","flexShrink","drawerPaper","Layout","classes","React","useState","drawerOpen","setDrawerOpen","handleDrawerToggle","AppBar","position","className","style","display","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Hidden","lgUp","implementation","anchor","open","onClose","paper","ModalProps","keepMounted","mdDown","Home","App","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0bASe,SAASA,EAAT,GAAyC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IAE5C,OACI,kBAACC,EAAA,EAAD,CACIC,QAAM,EACNC,IAAI,QACJC,UAAWC,IACXC,GAAIP,GAEJ,kBAACQ,EAAA,EAAD,KACKP,GAEL,kBAACQ,EAAA,EAAD,CAAcC,QAASX,KCRpB,SAASY,IACpB,IAAMC,EAAc,kBAAC,IAAD,MACdC,EAAa,kBAAC,IAAD,MAEnB,OACI,6BACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAAClB,EAAD,CAAYC,KAAM,QAASC,IAAK,QAASC,IAAKW,IAC9C,kBAACG,EAAA,EAAD,MACA,kBAACjB,EAAD,CAAYC,KAAM,QAASC,IAAK,QAASC,IAAKY,M,aCNxDI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAO,eACFD,EAAME,YAAYC,GAAG,MAAQ,CAC1BC,MAJQ,IAKRC,WAAY,IAGpBC,YAAa,CACTF,MATY,SAaL,SAASG,EAAT,GAAgC,IAAdrB,EAAa,EAAbA,UACvBsB,EAAUV,IAD0B,EAGNW,IAAMC,UAAS,GAHT,mBAGnCC,EAHmC,KAGvBC,EAHuB,KAK1C,SAASC,IACLD,GAAeD,GAGnB,IAAMV,EAAS,kBAAC,EAAD,MAEf,OACI,6BACI,6BACI,kBAACa,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAW,GAAIC,MAAO,CAACC,QAAS,UACrD,kBAACvB,EAAA,EAAD,KACI,kBAACwB,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,cACXC,KAAK,QACLC,QAASV,GAET,kBAAC,IAAD,OAEJ,kBAACW,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,kBAKR,yBAAKV,UAAWR,EAAQP,OAAQoB,aAAW,cAEvC,kBAACM,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OACxB,kBAAC,IAAD,CAEIJ,QAAQ,YACRK,OAAQ,OACRC,KAAMpB,EACNqB,QAASnB,EACTL,QAAS,CACLyB,MAAO,IAEXC,WAAY,CACRC,aAAa,IAGhBlC,IAGT,kBAAC0B,EAAA,EAAD,CAAQS,QAAM,EAACP,eAAe,OAC1B,kBAAC,IAAD,CACIrB,QAAS,CACLyB,MAAOzB,EAAQF,aAEnBmB,QAAQ,YACRM,MAAI,GAEH9B,MAKjB,6BACKf,IC1FF,SAASmD,IACpB,OACI,0CCqBOC,MAjBf,WAEI,OACI,yBAAKtB,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIuB,OAAK,EACLC,KAAM,IACNC,OAAQ,SAAAC,GAAK,OAAI,kBAACnC,EAAD,CAAQrB,UAAW,kBAACmD,EAASK,YCLlDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.65f44d10.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n// Material Design\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\n\nexport default function DrawerItem({ text, url, svg }) {\n\n    return (\n        <ListItem\n            button\n            key=\"Trade\"\n            component={Link}\n            to={url}\n        >\n            <ListItemIcon>\n                {svg}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n        </ListItem>\n    )\n}\n\nDrawerItem.propTypes = {\n    text: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    svg: PropTypes.object.isRequired,\n\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Material Design\nimport Divider from \"@material-ui/core/Divider\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport PersonIcon from \"@material-ui/icons/Person\";\n\n// My Components\nimport DrawerItem from './DrawerItem.js';\n\nexport default function Drawer() {\n    const historyIcon = <HistoryIcon />;\n    const personIcon = <PersonIcon />;\n\n    return (\n        <div>\n            <Toolbar />\n            <Divider />\n            <List>\n                <DrawerItem text={\"Page1\"} url={\"page1\"} svg={historyIcon} />\n                <Divider />\n                <DrawerItem text={\"Page2\"} url={\"page2\"} svg={personIcon} />\n            </List>\n        </div>\n    )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Material Design\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MUIDrawer from \"@material-ui/core/Drawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\n// My components\nimport MyDrawer from './Drawer.js';\nimport {makeStyles} from \"@material-ui/core\";\n\n// Styles\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n    drawer: {\n        [theme.breakpoints.up(\"lg\")]: {\n            width: drawerWidth,\n            flexShrink: 0\n        }\n    },\n    drawerPaper: {\n        width: drawerWidth\n    }\n}));\n\nexport default function Layout({ component }) {\n    const classes = useStyles();\n\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\n\n    function handleDrawerToggle() {\n        setDrawerOpen(!drawerOpen);\n    }\n\n    const drawer = <MyDrawer />;\n\n    return(\n        <div>\n            <div>\n                <AppBar position=\"fixed\" className={\"\"} style={{display: \"block\"}}>\n                    <Toolbar>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={handleDrawerToggle}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" noWrap>\n                            Austin Lynes\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <nav className={classes.drawer} aria-label=\"menu items\">\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Hidden lgUp implementation=\"css\">\n                        <MUIDrawer\n                            // container={container}\n                            variant=\"temporary\"\n                            anchor={\"left\"}\n                            open={drawerOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: \"\"\n                            }}\n                            ModalProps={{\n                                keepMounted: true // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </MUIDrawer>\n                    </Hidden>\n                    <Hidden mdDown implementation=\"css\">\n                        <MUIDrawer\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </MUIDrawer>\n                    </Hidden>\n                </nav>\n            </div>\n            <div>\n                {component}\n            </div>\n        </div>\n    )\n\n}\n\nLayout.propTypes = {\n    component: PropTypes.object,\n\n};","import React from 'react';\n\nexport default function Home() {\n    return (\n        <div>HOME PAGE</div>\n    )\n}","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\n\n// My Components\nimport Layout from './components/Layout/index.js';\nimport Home from './components/Home/index.js';\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route\n                        exact\n                        path={\"/\"}\n                        render={props => <Layout component={<Home {...props} />} />}\n                    />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}